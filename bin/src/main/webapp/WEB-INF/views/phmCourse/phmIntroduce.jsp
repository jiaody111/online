<%@ page language="java" contentType="text/html; charset=UTF-8"
         pageEncoding="UTF-8" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%
    String path = request.getContextPath();
    String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path + "/";
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">

<!DOCTYPE html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <script src="http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js"></script>
    <link href="http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css" rel="stylesheet">
    <script src="http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js"></script>
    <link href="<%=basePath%>assets/styles/course.css" rel="stylesheet">

</head>

<div class="categoryWithCarousel">
    <c:import url="/WEB-INF/views/common/header.jsp" />
    <div class="homepageCategoryProducts">
            <div class="left-mark"></div>
            <span class="categoryTitle">PHM智能维护技术引述</span>
            <div style="clear:both"></div>
            <div>
                <h4>  一、 智能维护技术的发展与问题</h4>
                <p></p>
                <h5>1.1 维护的目标</h5>
                <p></p>
                <p>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们知道维护的一个目是要解决生产制造中的问题。 这些问题包括设备的停机部件的损坏，质量的不良，甚至是能效的一些利用低利用率或者浪费。要解决这些问题，不能单单从这些问题产生的表象入手，而是要关注产生它们的原因，这些原因通常是潜藏在表象问题的背后的不可见问题，例如零件的磨损、腐蚀、泄露，或是一些人为操作的不良、环境因素，这些因素有多种多样的表征形式，并且很可能互相耦合交叉共同作用，最后产生了失效。</p>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于这种情况，要从源头入手，能够避免这些问题。因此，维护的一个终极目标并不仅发现这些失效，而是要解决和避免它们。就是要利用监控分析，甚至决策支持这样的手段来去解决和避免看不见的问题。这其实是一个宏观的对维护技术的愿景。如何能够避免不可见问题的发生，很重要的一点就是要做预测。
                </p>
                <p></p>
                <img src="http://image.phmlearn.com/mDioApJ0868Vwqd7__thumbnail.jpg" width="100%">
                <p></p>
                <h5>1.2 维护策略的演进</h5>
                <p></p>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;维护策略的演进历程与维护的方向是非常吻合的。传统的反应式的维护方式是等待设备坏掉后再去维修。后来人们发现对于一些高可靠性的设备，它的可靠性要求不能够被原有的传统的维护方式所满足。因此要做的预防性的过维护，它纯粹是基于时间的维修方式，通常对高可靠性的这样的零部件进行过度的维护，频繁的更换可能仍然能够用一段时间的零件。这种维护方式的成本是非常高昂的。</p>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;后来出现基于状态监测的维护CBM，它不再单纯依赖于时间，而是通过从设备里面采出来的实际的物理量来发现故障的一些早期现象，从而避免严重的故障发生。既然能对设备进行数据的收集，为什么不做进一步做预测呢？PHM就在这样的背景下产生了，有人又叫它CBM+，其实就是能够在状态监测的基础上，再更进一步预测设备的剩余使用寿命。</p>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随着维护技术的发展，整个设备生命周期里面的维护成本是逐渐降低的，但是模型的复杂程度会逐渐升高。也就是说系统的智能化程度是不断增大的。以上是PHM技术产生的背景。</p>
                <p></p>
                <img src="http://image.phmlearn.com/s74ybnijw343CavU__thumbnail.jpg" width="100%">
                <p></p>

                <h4>  二、 PHM概念与方法论</h4>
                <p></p>
                <h5>2.1 PHM的定义</h5>
                <p></p>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PHM本身是一门工程的学科，是很多在不同工程领域的总结并且融合形成了一套理论体系，本身就是来源于工程，因此它是一门应用，聚焦的是对复杂工程系统健康状态的一个监测预测与管理。因此它是针对最终的维护目标，精准最优化维护策略所诞生的学科。
                    PHM关心的问题可以概括成为一下几个方面：首先是降低成本，其实是通过对非预期的停机事件进行预测，减少过度维护，同时最大化部件设备的使用寿命，并且减少生产制造中不良的产品。</p>
                <p></p>
                <img src="http://image.phmlearn.com/T2mvVcpsBTsvzCtP__thumbnail.jpg" width="100%">
                <p></p>
                <h5>2.2 MTBD</h5>
                <p></p>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外是提高设备的可靠性。在这里提到一个新的概念：MTBD（Mean-Time-Before-Degradation），它对应着可靠性理论里面一个非常重要的概念：失效发生的平均时间。这种概念针对的通常是设备重复性比较大，并且能够被大批量生产的设备，能够单纯基于时间就能够统计出它的一个可靠性指标。另外是提高设备的可靠性。在这里提到一个新的概念：MTBD（Mean-Time-Before-Degradation），它对应着可靠性理论里面一个非常重要的概念：失效发生的平均时间。这种概念针对的通常是设备重复性比较大，并且能够被大批量生产的设备，能够单纯基于时间就能够统计出它的一个可靠性指标。</p>
                <p>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果做PHM的话，其实我们更关心的不是它到失效的时间，而是失效发生之前它发生衰退的时间。这其实是做PHM的时候可以针对复杂系统做到的预测，它什么时候衰退到一个严重程度的技术。所以PHM所关心的是更精细的可靠性的分析。
                </p>
                <p></p>
                <img src="http://image.phmlearn.com/JBOgFd31nbo0g6OU__thumbnail.jpg" width="100%">
                <p></p>
                <h5>2.3 概念与定义</h5>
                <p></p>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先是PHM里面P，在工业领域叫做故障诊断，在PHM这个学科里面狭义的故障预测指的是对设备剩余使用寿命的预测，也就是RUL的预测。RUL的预测需要具备几个条件，首先是要知道设备什么时候失效，并且通常要有全生命周期的数据，失效的标准如果能够被量化，与失效的全生命周期的过程的数据对应起来，就可以做建立RUL预测的模型。</p>
                <p>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但有时往往拿不到全生命周期的数据，而且对失效的标准定义也非常模糊，其实在工业领域是非常常见的。如果失效的标准定义都非常模糊，那就别提我们说对它的量化，所以更常做的是对健康趋势的一个判断，我们称为健康预测。健康预测就是说在近期的时间段内预测设备的健康值的走向，也就是如果它发展到一定程度的时候，看它发展的速度在当下的情况是不是需要关注，所以说是起到趋势预测的作用，还达不到对完整的剩余使用寿命的预测。
                </p>
                <p></p>
                <img src="http://image.phmlearn.com/hJoxlsrSBJoJZ6Lc__thumbnail.jpg" width="100%">
                <p></p>

                <h4>  三、 PHM系统的设计</h4>
                <p></p>
                <h5>3.1 故障预测的主要方法</h5>
                <p></p>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了数据驱动的方式，还有其他三种不同的方式，有基于机理建模的，这个其实是控制学科里面衍生出来的一些对故障的检测跟分类技术，也有机理跟数据驱动相结合的方式，同时也存在用传统的可靠性统计分析方式来做故障的预测。</p>
                <p></p>
                <img src="http://image.phmlearn.com/1_3_1.jpg" width="100%">
                <br>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来这门课的重点是基于数据驱动的方式来做建模的。基本的示意图如下，在特征空间里面能够看到，如果设备处在健康状态，它会存在于特定的一个分布范围内。如果失效的话，会在这个特征空间里面发生一定的漂移。如果对设备的状态进行监测，就可以预测它什么时候会跑出失效的边界，从而预测它的剩余使用寿命，其实就是用数据驱动的方法做剩余使用寿命预测的方法。</p>
                <p></p>
                <h5>3.2 不同层次的PHM系统功能</h5>
                <p></p>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;做使用寿命预测有一定的前提条件，我们拿到的数据可能是在机器健康正常运转下的数据，能够利用它的历史基线建立一个机械模型，对于机械模型跟现实的状态的对比的话，我们能够评估它的健康状态。如果我们能够拿到一些故障状态的数据，可以对故障的数据建立历史基线，同时用一个分类模型就可以对故障进行自动的诊断。再进一步，如果有针对不同故障模式的全生命周期的数据，就可以进行故障预测。</p>
                <p></p>
                <img src="http://image.phmlearn.com/1_3_2.jpg" width="100%">
                <p></p>
                <h5>3.3 实现PHM建模的方法论</h5>
                <p></p>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不管是实现哪一个层次的PHM的建模方式，步骤的是基本相似的。首先对数据进行采集后，要对信号进行处理，降噪清洗，之后要进行特征提取与特征选择。接下来对系统进行一个健康评估，对它的失效模式进行分类，并且进行健康趋势的使用寿命预测。不管是实现哪一个层次的PHM的建模方式，步骤的是基本相似的。首先对数据进行采集后，要对信号进行处理，降噪清洗，之后要进行特征提取与特征选择。接下来对系统进行一个健康评估，对它的失效模式进行分类，并且进行健康趋势的使用寿命预测。</p>
                <p></p>
                <img src="http://image.phmlearn.com/1_3_3.jpg" width="100%">
                <p></p>
                <h5>3.4智能维护技术设计和开发流程</h5>
                <p></p>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设计一个PHM系统有七个主要步骤，首先，要做一个PHM系统，其实是要判别所面临的对象适不适合做PHM，如果适合，要关注它的哪一类故障模式，是什么样的具体的问题。这个是前期非常重要的要定义出来的需求，这个需求通常是做PHM的数据科学家与终端的用户，甚至要带上设备的制造商一块儿来研讨定义需求。这个需求被定义之后，就要定义监控层次，具体是要做组件级的还是设备级的，是产线级还是工程级的？之后要选择模型，在这个层级的模型选择要定义场景到底是要是强数据弱机理，还是弱机理强数据，甚至是机理跟数据都强，取决于要用哪一个类型的模型。举例来说：机理比较强，但是数据很少，这个时候就要借鉴一些领域知识，尽量用基于机理的模型做数据的分析；有的时候数据量很大，但是对系统不是很了解，这样就比较适合用纯粹的数据驱动的方式来做。接下来就要选择一些关键的参数，这个跟前面定义的需求、业务目标、选择的要监控的关键参数是有非常紧密的关联的。在这一步是要定义到底采集哪些数据，如果没有这样的数据，要外加传感器。如果不能加传感器，就要回到我们的需求定义层次，减少功能。接下来就要做部署策略跟实验设计，也就是说要开始采集一些能够进行可行性分析的数据了。这些数据要能够支撑我们尽量采集完整的工况，并且能够尽量覆盖到不同的失效模式。如果能有全生命周期的数据的话，其实是最好的。第六步，要对技术和经济性的可行性进行一个研究，这个时候已经建完模了，对数据有一定程度的理解跟分析结果后，是能够进行一些对标的分析，然后对应到我们经济性上，分析我们的项目的可行性。如果被证明可行，就要进行实际的线上的技术开发，与上线的应用等部署。
                    设计一个PHM系统有七个主要步骤，首先，要做一个PHM系统，其实是要判别所面临的对象适不适合做PHM，如果适合，要关注它的哪一类故障模式，是什么样的具体的问题。这个是前期非常重要的要定义出来的需求，这个需求通常是做PHM的数据科学家与终端的用户，甚至要带上设备的制造商一块儿来研讨定义需求。这个需求被定义之后，就要定义监控层次，具体是要做组件级的还是设备级的，是产线级还是工程级的？之后要选择模型，在这个层级的模型选择要定义场景到底是要是强数据弱机理，还是弱机理强数据，甚至是机理跟数据都强，取决于要用哪一个类型的模型。举例来说：机理比较强，但是数据很少，这个时候就要借鉴一些领域知识，尽量用基于机理的模型做数据的分析；有的时候数据量很大，但是对系统不是很了解，这样就比较适合用纯粹的数据驱动的方式来做。接下来就要选择一些关键的参数，这个跟前面定义的需求、业务目标、选择的要监控的关键参数是有非常紧密的关联的。在这一步是要定义到底采集哪些数据，如果没有这样的数据，要外加传感器。如果不能加传感器，就要回到我们的需求定义层次，减少功能。</p>
                <p></p>
                <p>接下来就要做部署策略跟实验设计，也就是说要开始采集一些能够进行可行性分析的数据了。这些数据要能够支撑我们尽量采集完整的工况，并且能够尽量覆盖到不同的失效模式。如果能有全生命周期的数据的话，其实是最好的。第六步，要对技术和经济性的可行性进行一个研究，这个时候已经建完模了，对数据有一定程度的理解跟分析结果后，是能够进行一些对标的分析，然后对应到我们经济性上，分析我们的项目的可行性。如果被证明可行，就要进行实际的线上的技术开发，与上线的应用等部署。
                </p>
                <img src="http://image.phmlearn.com/1_3_4.jpg" width="100%">
                <p></p>
            </div>
            <div style="clear:both"></div>
    </div>
</div>
</html>