<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.koala.learn.dao.BuildinFileMapper" >
  <resultMap id="BaseResultMap" type="com.koala.learn.entity.BuildinFile" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="file" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="smallfile" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="name" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.koala.learn.entity.BuildinFile" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="file" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="smallfile" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="des" jdbcType="LONGVARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, file, smallfile, name
  </sql>
  <sql id="Blob_Column_List" >
    des
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from buildin_file
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from buildin_file
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.koala.learn.entity.BuildinFile" >
    insert into buildin_file (id, file, smallfile, 
      name, des)
    values (#{id,jdbcType=INTEGER}, #{file,jdbcType=VARCHAR}, #{smallfile,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{des,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.koala.learn.entity.BuildinFile" >
    insert into buildin_file
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="file != null" >
        file,
      </if>
      <if test="smallfile != null" >
        smallfile,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="des != null" >
        des,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="file != null" >
        #{file,jdbcType=VARCHAR},
      </if>
      <if test="smallfile != null" >
        #{smallfile,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="des != null" >
        #{des,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.koala.learn.entity.BuildinFile" >
    update buildin_file
    <set >
      <if test="file != null" >
        file = #{file,jdbcType=VARCHAR},
      </if>
      <if test="smallfile != null" >
        smallfile = #{smallfile,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="des != null" >
        des = #{des,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.koala.learn.entity.BuildinFile" >
    update buildin_file
    set file = #{file,jdbcType=VARCHAR},
      smallfile = #{smallfile,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      des = #{des,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.koala.learn.entity.BuildinFile" >
    update buildin_file
    set file = #{file,jdbcType=VARCHAR},
      smallfile = #{smallfile,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectAllFile" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />,
    <include refid="Blob_Column_List" />
    from buildin_file
  </select>
</mapper>